model Gangsta 
class SimulationModel

  attributes
	totalBiomass : Real 

operations
  simulation() 
	initGangstaInstance()  
  	  begin     
		for i in self.compounds do
 			  i.initialAmountMols := 0; 
  			  i.finalAmountMols := 0;
  	  end;  
	  self.totalBiomass := 0;
	end
end

class Compound
  attributes 
	name : String
	initialAmountMols : Real
	finalAmountMols : Real
	
operations
  setInitialAmountMols(mols : Real)
    begin
	self.initialAmountMols := mols
    end
end

class InfiniteCompound < Compound  
  constraints
	inv sourceSinkInitialAmtMols: initialAmountMols = 0
end

class FiniteCompound < Compound
  constraints
  	inv compoundInitialAmtMols: initialAmountMols >= 0    
	inv compoundFinalAmtMols: finalAmountMols >= 0
end

class Organism < FiniteCompound
  attributes
	respirationRate : Real
	respirationEnergyJoules : Real 
	energyJoules : Real
  constraints
	inv expression14: respirationEnergyJoules = self.respirationRate * self.finalAmountMols
	inv expression15: self.energyJoules = processes.energyJoules->sum()
	inv expression16: self.respirationEnergyJoules + self.energyJoules = 0
end

class Pool
  attributes
	name :String
	initialAmountMols :Real  
	finalAmountMols : Real   
	stoichiometricRatio : Real  

  operations
    setStoichiometricRatio(ratio : Real)
    begin
	  self.stoichiometricRatio := ratio
  	end

  constraints
	inv expression9: self.initialAmountMols = self.stoichiometricRatio * compound.initialAmountMols
	inv expression10: self.finalAmountMols = self.stoichiometricRatio * compound.finalAmountMols
	inv expression12: self.finalAmountMols = self.initialAmountMols +  transfersIn.amountMolsTransfer->sum()- transfersOut.amountMolsTransfer->sum() 
	inv expression13: self.initialAmountMols >= transfersOut.amountMolsTransfer->sum()
end

class Transfer
  attributes
	name : String
	amountMolsTransfer : Real
	jouleToMolRatio : Real

  operations
	setJouleToMolRatio (ratio : Real)
	begin
	  self.jouleToMolRatio := ratio
	end
end

class Process
  attributes
	name : String
	energyJoules : Real 
		
  constraints 
	inv expression11: transfers->forAll(t:Transfer | t.amountMolsTransfer * t.jouleToMolRatio= self.energyJoules)
end

composition assoc0 between
	SimulationModel [1] role simulationModel
	Compound [1..*] role compounds
end

composition assoc1 between
	Compound [1] role compound
	Pool [1..*] role pools
end

association assoc2 between
	Pool [1] role fromPool
	Transfer [1..*] role transfersOut
end

association assoc3 between
	Pool [1] role toPool
	Transfer [1..*] role transfersIn
end

composition assoc4 between  
	Process [1] role process
	Transfer [1..*] role transfers
end

composition assoc5 between
	Organism [1] role organism
	Process [1..*] role processes
end

constraints
  context SimulationModel::simulation()
    pre:self.compounds->notEmpty()
    post: totalBiomass = self.compounds->select( oclIsTypeOf( Organism ) ).finalAmountMols->sum()

  context SimulationModel::initGangstaInstance()
    pre:self.compounds->notEmpty()
    post:self.totalBiomass = 0